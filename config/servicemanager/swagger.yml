swagger: "2.0"

info:
  version: 1.1.5
  title: STT Service Manager
  description: A simple way to use the STT Service Manager APIs

schemes:
  - ${{http}}
host: ${{LINTO_STACK_DOMAIN}}

#{{BASIC_AUTH}} securityDefinitions:
#{{BASIC_AUTH}}   basicAuth:
#{{BASIC_AUTH}}     type: basic
#{{BASIC_AUTH}}     Authorization: Basic ${{BASIC_AUTH}}

#{{BASIC_AUTH}} security:
#{{BASIC_AUTH}}   - basicAuth: []

definitions:
  Entity:
    title: Entity items
    description: An example of to create an array of items
    items:
      type: string
    type: array
    example: ['item1', 'item2', 'item3']
  Intent:
    title: Intent items
    description: An example of to create an array of commands
    items:
      type: string
    type: array
    example: ['cmd1', 'cmd2', 'cmd3']
  Data:
    title: Language Model data
    description: An example of how to create the data
    type: object
    properties:
      lang:
        type: string
      acousticModel:
        type: string
      type:
        type: string
      data:
        type: object
        properties:
          intents:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                items:
                  type: array
                  items:
                    type: string
          entities:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                items:
                  type: array
                  items:
                    type: string

parameters:
  service:
    serviceId-req:
      name: "serviceId"
      in: "path"
      description: "Service Name: must be unique and must finish by a character or number - Allowed characters: 'a-z', 'A-Z', '0-9', '_', and '-'"
      required: true
      type: "string"
      pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]*[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9]$'
    api-access-req:
        name: "externalAccess"
        in: "formData"
        description: "Allow external access to the service API"
        required: true
        type: "string"
        enum: [ "", "yes", "no" ]
    replicas:
        name: "replicas"
        in: formData
        description: "Number of replicas"
        type: integer
        minimum: 1
        default: 1
    replicas-req:
        name: "replicas"
        in: formData
        description: "Number of replicas"
        required: true
        type: integer
        minimum: 1
        default: 1
    replicas-path-req:
        name: "replicas"
        in: path
        description: "Number of replicas"
        required: true
        type: integer
        minimum: 1
        default: 1
    tag:
        name: "tag"
        in: "formData"
        description: "Service transcription mode"
        type: "string"
        enum: [ "", "offline", "online" ]
    tag-req:
        name: "tag"
        in: "formData"
        description: "Service transcription mode"
        required: true
        type: "string"
        enum: [ "", "offline", "online" ]

    LM:
        name: "languageModel"
        in: formData
        description: "Language Model 'modelId' that will be use by the current service"
        type: "string"
        pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]+$'
    LM-req:
      name: "languageModel"
      in: formData
      description: "Language Model 'modelId' that will be used by the current service"
      required: true
      type: "string"
      pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]+$'

  model:
    modelId-req:
      name: "modelId"
      in: "path"
      description: "Model Name: must be unique - Allowed characters: 'a-z', 'A-Z', '0-9', '_', and '-'"
      required: true
      type: "string"
      pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]+$'
    
    modelID-req:
      name: "modelID"
      in: "path"
      description: "Model Name: must be unique - Allowed characters: 'a-z', 'A-Z', '0-9', '_', and '-'"
      required: true
      type: "string"
      pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]+$'
    
    file:
      name: "file"
      in: "formData"
      description: "Local Reference - Allowed file format: zip, tar.gz"
      type: "file"
    
    file-txt-req:
      name: "file"
      in: "formData"
      description: "Local Reference - Text file required"
      required: true
      type: "file"

    link:
      name: "link"
      in: "formData"
      description: "URL Reference - Allowed file format: zip, tar.gz"
      type: "string"

    lang:
      name: "lang"
      in: "formData"
      description: "Transcription Language - ISO Language Code Table: ar-SA, de-DE, en-GB, en-US, es-ES, fr-FR, ..."
      type: "string"

    lang-req:
      name: "lang"
      in: "formData"
      description: "Transcription Language - ISO Language Code Table: ar-SA, de-DE, en-GB, en-US, es-ES, fr-FR, ..."
      required: true
      type: "string"

    description:
      name: "desc"
      in: "formData"
      description: "Description"
      type: "string"

    data:
      name: "data"
      in: "body"
      description: "Language model content - A JSON object"
      required: false
      schema:
        $ref: '#/definitions/Data'
        
    lmodel:
      name: "lmodelId"
      in: "formData"
      description: "'modelId' of an existing Language Model"
      required: false
      type: "string"
      pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]+$'

    amodel:
      name: "acousticModel"
      in: "formData"
      description: "'modelId' of an existing Acoustic Model"
      required: false
      type: "string"
      pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]+$'

    type:
      name: "type"
      in: "formData"
      description: "Language model type: large vocabulary (lvcsr) or command (cmd)"
      required: true
      type: "string"
      enum: [ "", "lvcsr", "cmd" ]

    entity-req:
      name: "name"
      in: "path"
      description: "Entity Name: must be unique - Allowed characters: 'a-z', 'A-Z', '0-9', '_', and '-'"
      required: true
      type: "string"
      pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]+$'

    intent-req:
      name: "name"
      in: "path"
      description: "Intent Name: must be unique - Allowed characters: 'a-z', 'A-Z', '0-9', '_', and '-'"
      required: true
      type: "string"
      pattern: '[a-zA-ZàâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ0-9_\-]+$'

    entity-data-req:
      name: "entity"
      in: "body"
      description: "Entity items - A JSON object"
      required: true
      schema:
        $ref: '#/definitions/Entity'
    
    intent-data-req:
      name: "intent"
      in: "body"
      description: "Intent items - A JSON object"
      required: true
      schema:
        $ref: '#/definitions/Intent'
        
  stt:
    file:
      name: "file"
      in: "formData"
      description: "Audio File - Waveform format is supported"
      type: "file"

paths:
  /${{linsttPathPrefix}}/{serviceId}/transcribe:
    post:
      tags:
        - "Speech-To-Text API"
      summary: Perform Speech-to-Text
      consumes:
      - "multipart/form-data"
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - $ref: '#/parameters/service/serviceId-req'
      - $ref: '#/parameters/stt/file'
      responses:
        200:
          description: Successfully transcribe the audio
        400:
          description: Worker failed to transcribe the audio


  /${{PathPrefix}}/service/{serviceId}:
    post:
      tags:
        - "Service Manager APIs"
      summary: Create the service by serviceId
      produces:
      - "application/json"
      parameters: 
      - $ref: '#/parameters/service/serviceId-req'
      - $ref: '#/parameters/service/replicas-req'
      - $ref: '#/parameters/service/tag-req'
      - $ref: '#/parameters/service/LM-req'
      - $ref: '#/parameters/service/api-access-req'
      responses:
        200:
          description: success
        400:
          description: error
    put:
      tags:
        - "Service Manager APIs"
      summary: Update the service by serviceId
      produces:
      - "application/json"
      parameters: 
      - $ref: '#/parameters/service/serviceId-req'
      - $ref: '#/parameters/service/replicas'
      - $ref: '#/parameters/service/tag'
      - $ref: '#/parameters/service/LM'
      - $ref: '#/parameters/service/api-access-req'
      responses:
        200:
          description: success
        400:
          description: error
    delete:
      tags:
        - "Service Manager APIs"
      summary: delete the service by serviceId
      produces:
      - "application/json"
      parameters: 
      - $ref: '#/parameters/service/serviceId-req'
      responses:
        200:
          description: success
        400:
          description: error
    get:
      tags:
        - "Service Manager APIs"
      summary: get the service information by serviceId
      produces:
      - "application/json"
      parameters:
        - $ref: '#/parameters/service/serviceId-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/service/{serviceId}/replicas:
    get:
      tags:
        - "Service Manager APIs"
      summary: get the number of replicas by serviceId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/service/serviceId-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/service/{serviceId}/mode:
    get:
      tags:
        - "Service Manager APIs"
      summary: get the decoding mode by serviceId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/service/serviceId-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/services:
    get:
      tags:
        - "Service Manager APIs"
      summary: get all created services
      produces:
      - "application/json"
      responses:
        200:
          description: success


  /${{PathPrefix}}/service/{serviceId}/start:
    post:
      tags:
        - "Service Runtime APIs"
      summary: start service by serviceId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/service/serviceId-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/service/{serviceId}/stop:
    post:
      tags:
        - "Service Runtime APIs"
      summary: stop service by serviceId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/service/serviceId-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/service/{serviceId}/scale/{replicas}:
    post:
      tags:
        - "Service Runtime APIs"
      summary: start service by serviceId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/service/serviceId-req'
      - $ref: '#/parameters/service/replicas-path-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/services/running:
    get:
      tags:
        - "Service Runtime APIs"
      summary: get all started services
      produces:
      - "application/json"
      responses:
        200:
          description: success


  /${{PathPrefix}}/acmodel/{modelId}:
    post:
      tags:
        - "Acoustic Model Management"
      summary: "Create the acoustic model by modelId"
      description: |
        <p style="font-size:16px">The <b>'file'</b> and <b>'link'</b> parameters can be used to upload the desired acoustic model.<br>
        <b>One parameter should be specified</b>. If both parameters are provided, <b>the 'file' parameter will be considered</b>.</p>
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/file'
      - $ref: '#/parameters/model/link'
      - $ref: '#/parameters/model/lang-req'
      - $ref: '#/parameters/model/description'
      responses:
        200:
          description: success
        400:
          description: error
    delete:
      tags:
        - "Acoustic Model Management"
      summary: Delete the acoustic model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      responses:
        200:
          description: success
        400:
          description: error
    get:
      tags:
        - "Acoustic Model Management"
      summary: get the acoustic model information by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/acmodels:
    get:
      tags:
        - "Acoustic Model Management"
      summary: get all created acoustic models
      produces:
      - "application/json"
      responses:
        200:
          description: success


  /${{PathPrefix}}/langmodel/{modelId}:
    post:
      tags:
        - "Language Model Management"
      summary: Create the language model by modelId
      description: |
        <div style="font-size:16px">To create the model, one of the following parameters should be used:</div>
        <ul style="font-size:16px">
          <li>To upload a pretrained model, use the parameters <b>'file'</b> or <b>'link'</b> for local and remove references respecitvely.</li>
          <li>To create a copy of an already created, use the parameter <b>'lmodelId'</b> and put the model ID.</li>
        </ul>
        <div style="font-size:16px"><b>NB: If no parameter is specified, an empty language model will be created</b>.</div>
        <p></p>
        <div style="font-size:16px">To specify the acoustic model that will be used with the current language model, one of the following parameters can be used:</div>
        <ul style="font-size:16px">
          <li><b>'lang'</b>: the ISO language of existing acoustic models. It will select automatically the most recent model according to this passed language.</li>
          <li><b>'acousticModel'</b>: the modelId of an existing acoustic model.</li>
        </ul>
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/file'
      - $ref: '#/parameters/model/link'
      - $ref: '#/parameters/model/lmodel'
      - $ref: '#/parameters/model/lang'
      - $ref: '#/parameters/model/amodel'
      - $ref: '#/parameters/model/type'
      responses:
        200:
          description: success
        400:
          description: error
    delete:
      tags:
        - "Language Model Management"
      summary: Delete the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      responses:
        200:
          description: success
        400:
          description: error
    get:
      tags:
        - "Language Model Management"
      summary: get the language model information by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/langmodel/{modelId}/generate/graph:
    get:
      tags:
        - "Language Model Management"
      summary: Generate the language model by modelId
      description: |
        <div style="font-size:16px">After executing this API, you can get the language model information using 'GET /langmodel/{modelId}' API and check the following parameters:<div>
        <ul style="font-size:16px">
          <li><b>'updateState'</b>: the update percentage. If generation succeeded, the value will be 0 – -1, if not.</li>
          <li><b>'updateStatus'</b>: the update message.</li>
        </ul>

      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      responses:
        200:
          description: success
  /${{PathPrefix}}/langmodels:
    get:
      tags:
        - "Language Model Management"
      summary: get all created language models
      produces:
      - "application/json"
      responses:
        200:
          description: success
  /${{PathPrefix}}/langmodel/{modelID}:
    post:
      tags:
        - "Language Model Management (JSON format)"
      summary: Create the language model by modelId
      description: |
        <div style="font-size:16px">To specify the acoustic model that will be used with the current language model, one of the following parameters can be used:</div>
        <ul style="font-size:16px">
          <li><b>'lang'</b>: the ISO language of existing acoustic models. It will select automatically the most recent model according to this passed language.</li>
          <li><b>'acousticModel'</b>: the modelId of an existing acoustic model.</li>
        </ul>
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelID-req'
      - $ref: '#/parameters/model/data'
      responses:
        200:
          description: success
        400:
          description: error


  /${{PathPrefix}}/langmodel/{modelId}/entity/{name}:
    post:
      tags:
        - "Language Model 'Entity' Management"
      summary: Add entity to the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/entity-req'
      - $ref: '#/parameters/model/file-txt-req'
      responses:
        200:
          description: success
        400:
          description: error
    put:
      tags:
        - "Language Model 'Entity' Management"
      summary: Reset entity of the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/entity-req'
      - $ref: '#/parameters/model/file-txt-req'
      responses:
        200:
          description: success
        400:
          description: error
    patch:
      tags:
        - "Language Model 'Entity' Management"
      summary: Update entity of the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/entity-req'
      - $ref: '#/parameters/model/file-txt-req'
      responses:
        200:
          description: success
        400:
          description: error
    delete:
      tags:
        - "Language Model 'Entity' Management"
      summary: delete entity of the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/entity-req'
      responses:
        200:
          description: success
        400:
          description: error
    get:
      tags:
        - "Language Model 'Entity' Management"
      summary: get the entity information of the language model by modelId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/entity-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/langmodel/{modelId}/entities:
    get:
      tags:
        - "Language Model 'Entity' Management"
      summary: get all entities of the language model by modelId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      responses:
        200:
          description: success

  /${{PathPrefix}}/langmodel/{modelID}/entity/{name}:
    post:
      tags:
        - "Language Model 'Entity' Management (JSON format)"
      summary: Add entity to the language model by modelId
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelID-req'
      - $ref: '#/parameters/model/entity-req'
      - $ref: '#/parameters/model/entity-data-req'
      responses:
        200:
          description: success
        400:
          description: error
    put:
      tags:
        - "Language Model 'Entity' Management (JSON format)"
      summary: Reset entity of the language model by modelId
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelID-req'
      - $ref: '#/parameters/model/entity-req'
      - $ref: '#/parameters/model/entity-data-req'
      responses:
        200:
          description: success
        400:
          description: error
    patch:
      tags:
        - "Language Model 'Entity' Management (JSON format)"
      summary: Update entity of the language model by modelId
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelID-req'
      - $ref: '#/parameters/model/entity-req'
      - $ref: '#/parameters/model/entity-data-req'
      responses:
        200:
          description: success
        400:
          description: error



  /${{PathPrefix}}/langmodel/{modelId}/intent/{name}:
    post:
      tags:
        - "Language Model 'Intent' Management"
      summary: Add intent to the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/intent-req'
      - $ref: '#/parameters/model/file-txt-req'
      responses:
        200:
          description: success
        400:
          description: error
    put:
      tags:
        - "Language Model 'Intent' Management"
      summary: Reset intent of the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/intent-req'
      - $ref: '#/parameters/model/file-txt-req'
      responses:
        200:
          description: success
        400:
          description: error
    patch:
      tags:
        - "Language Model 'Intent' Management"
      summary: Update intent of the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/intent-req'
      - $ref: '#/parameters/model/file-txt-req'
      responses:
        200:
          description: success
        400:
          description: error
    delete:
      tags:
        - "Language Model 'Intent' Management"
      summary: delete intent of the language model by modelId
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/intent-req'
      responses:
        200:
          description: success
        400:
          description: error
    get:
      tags:
        - "Language Model 'Intent' Management"
      summary: get the intent information of the language model by modelId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      - $ref: '#/parameters/model/intent-req'
      responses:
        200:
          description: success
        400:
          description: error
  /${{PathPrefix}}/langmodel/{modelId}/intents:
    get:
      tags:
        - "Language Model 'Intent' Management"
      summary: get all intents of the language model by modelId
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelId-req'
      responses:
        200:
          description: success

  /${{PathPrefix}}/langmodel/{modelID}/intent/{name}:
    post:
      tags:
        - "Language Model 'Intent' Management (JSON format)"
      summary: Add intent to the language model by modelId
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelID-req'
      - $ref: '#/parameters/model/intent-req'
      - $ref: '#/parameters/model/intent-data-req'
      responses:
        200:
          description: success
        400:
          description: error
    put:
      tags:
        - "Language Model 'Intent' Management (JSON format)"
      summary: Reset intent of the language model by modelId
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelID-req'
      - $ref: '#/parameters/model/intent-req'
      - $ref: '#/parameters/model/intent-data-req'
      responses:
        200:
          description: success
        400:
          description: error
    patch:
      tags:
        - "Language Model 'Intent' Management (JSON format)"
      summary: Update intent of the language model by modelId
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/model/modelID-req'
      - $ref: '#/parameters/model/intent-req'
      - $ref: '#/parameters/model/intent-data-req'
      responses:
        200:
          description: success
        400:
          description: error
